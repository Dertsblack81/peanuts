@using System.Globalization
@using Com.QueoFlow.Peanuts.Net.Core.Domain.Peanuts
@using Com.QueoFlow.Peanuts.Net.Web.Helper
@model Com.QueoFlow.Peanuts.Net.Web.Models.UserGroup.UserGroupMembershipStatisticsViewModel

@{
    ViewBag.Title = Model.UserGroupMembership.UserGroup.Name;
    Layout = "~/Views/Shared/_LayoutSidebar.cshtml";
}

@section toolbar {
    <a class="btn btn-default" href="@Url.Action("AllMemberships", "UserGroup")">
        <span class="icon-arrow-left"></span>
        Zurück
    </a>

    @if (Model.UserGroupMembershipOptions.CanRefuseInvitation) {
        <a class="btn btn-danger pull-right" href="@Url.Action("QuitMembershipForm", "UserGroup", new { userGroup = Model.UserGroupMembership.UserGroup.BusinessId, userGroupMembership = Model.UserGroupMembership.BusinessId })">
            <span class="icon-thumbs-down"></span>
            Einladung ablehnen
        </a>
    }
    @if (Model.UserGroupMembershipOptions.CanAcceptInvitation) {
        using (Html.BeginForm("AcceptMembershipInvitation", "UserGroup", new {
            userGroup = Model.UserGroupMembership.UserGroup.BusinessId, userGroupMembership = Model.UserGroupMembership.BusinessId
        }, FormMethod.Post, new {
            @class = "form-inline  pull-right", role = "form"
        })) {
            @Html.AntiForgeryToken()
            @Html.HttpMethodOverride(HttpVerbs.Patch)
            <button class="btn btn-success" type="submit">
                <span class="icon-thumbs-up"></span>
                Einladung annehmen
            </button>
        }
    }
    @if (Model.UserGroupMembershipOptions.CanRefuseRequest) {
        <a class="btn btn-danger pull-right" href="@Url.Action("QuitMembershipForm", "UserGroup", new { userGroup = Model.UserGroupMembership.UserGroup.BusinessId, userGroupMembership = Model.UserGroupMembership.BusinessId })">
            <span class="icon-thumbs-down"></span>
            Anfrage ablehnen
        </a>
    }
    @if (Model.UserGroupMembershipOptions.CanAcceptRequest) {
        using (Html.BeginForm("AcceptMembershipRequest", "UserGroup", new {
            userGroup = Model.UserGroupMembership.UserGroup.BusinessId, userGroupMembership = Model.UserGroupMembership.BusinessId
        }, FormMethod.Post, new {
            @class = "form-inline  pull-right", role = "form"
        })) {
            @Html.AntiForgeryToken()
            @Html.HttpMethodOverride(HttpVerbs.Patch)
            <button class="btn btn-success" type="submit">
                <span class="icon-thumbs-up"></span>
                Anfrage annehmen
            </button>
        }
    }
    @if (Model.UserGroupMembership.IsActiveMembership) {
        <a class="btn btn-danger pull-right" href="@Url.Action("QuitMembershipForm", "UserGroup", new { userGroup = Model.UserGroupMembership.UserGroup.BusinessId, userGroupMembership = Model.UserGroupMembership.BusinessId })">
            <span class="icon-close"></span>
            Mitgliedschaft beenden
        </a>
    }

}

@section tabs {
    <ul class="nav nav-tabs" role="tablist">
       <li role="presentation">
            <a href="@Url.Action("MembershipDetails", new { userGroup = Model.UserGroupMembership.UserGroup.BusinessId })" aria-controls="details" role="tab">
                Mitgliedschaft
            </a>
        </li>
        <li role="presentation">
            <a href="@Url.Action("Peanuts", new { userGroup = Model.UserGroupMembership.UserGroup.BusinessId })" aria-controls="peanuts" role="tab">
                Peanuts
            </a>
        </li>
        <li role="presentation" class="active">
            <a href="@Url.Action("Statistics", new { userGroup = Model.UserGroupMembership.UserGroup.BusinessId })" aria-controls="statistics" role="tab">
                Statistik
            </a>
        </li>
        @if (Model.UserGroupMembershipOptions.CanAdministrate) {
            <li role="presentation">
                <a href="@Url.Action("Administration", new { userGroup = Model.UserGroupMembership.UserGroup.BusinessId })" aria-controls="administration" role="tab">
                    Administration
                </a>
            </li>
        }
    </ul>

}


<div class="form form-horizontal">
    <div class="nav-tabs-content tab-content">

        <div class="nav-tabs-panel tab-pane active" role="tabpanel" id="statistics">
            @if (Model.Statistics != null) {
                <fieldset>
                    <legend class="form__legend pull-left">
                        Peanuts
                    </legend>
                    <div class="form__row">
                        <div class="form__col">
                            @Html.Form().Static("Peanuts gesamt", Model.Statistics.TotalPeanutsInGroup)
                            @Html.Form().Static("Durchschnittliche Anzahl Teilnehmer", Model.Statistics.CanceledPeanutsInGroup.ToString("0.0"))
                            @Html.Form().Static("Von mir erstellte Peanuts", Model.Statistics.PeanutsCreatedByMember)
                        </div>
                        <div class="form__col">
                            @Html.Form().Static("durchgeführte Peanuts", Model.Statistics.DonePeanutsInGroup)
                            @Html.Form().Static("abgesagte Peanuts", Model.Statistics.CanceledPeanutsInGroup)
                            @Html.Form().Static("aktuelle Peanuts", Model.Statistics.CurrentPeanutCount)
                        </div>
                    </div>
                </fieldset>
                <fieldset>
                    <legend class="form__legend pull-left">
                        Gruppenkarma
                    </legend>
                    <div class="js-chart karma-chart" id="karma_chart">
                        <script type="application/json">
                                {
                                "type": "horizontalBar",
                                "data": {
                                "labels": ["@Html.Raw(string.Join("\", \"", Model.Karmas.Keys.Select(member => member.User.DisplayName)))"],
                                "datasets": [{
                                "label": "aktuelles Karma",
                                "data": [@(string.Join(", ", Model.Karmas.Values))],
                                "backgroundColor": ["@Html.Raw(string.Join("\", \"", Model.Karmas.Values.Select(k => k > 0 ? "rgba(0, 99, 132, 0.6)" : "rgba(255, 0, 0, 0.6)")))"]
                                }]
                                },
                                "options": {
                                "legend": {
                                "display": false
                                }
                                }

                                }
                            </script>
                        <canvas></canvas>
                    </div>
                    
                </fieldset>
                <div class="clearfix"></div>
                <fieldset>
                    <legend class="form__legend pull-left">
                        Teilnahmen
                    </legend>
                    <div class="form__row">
                        <div class="form__col">
                            @Html.Form().Static("Teilnahmen Gesamt", Model.Statistics.PeanutParticipationCountTotal)
                            @Html.Form().Static("durchgeführte Peanuts", Model.Statistics.ParticipationsOnDonePeanutsInGroup)
                            @Html.Form().Static("abgesagt Peanuts", Model.Statistics.ParticipationsOnCanceledPeanutsInGroup)
                        </div>
                        <div class="form__col">
                            @foreach (KeyValuePair<PeanutParticipationType, int> type in Model.Statistics.ParticipationsByType) {
                                @Html.Form().Static("Teilnahmen als " + type.Key.DisplayName, type.Value)
                            }
                        </div>
                    </div>


                </fieldset>
                <fieldset>
                    <legend class="form__legend pull-left">
                        Preisentwicklung
                    </legend>

                    <div class="form__row">
                        <div class="form__col">
                            @if (Model.Statistics.MaxPrice.HasValue) {
                                @Html.Form().Static("Höchster Preis", string.Format("{0:C} ({1})", Model.Statistics.MaxPrice.Value.Value, Model.Statistics.MaxPrice.Value.Key.Name))
                            }
                            @if (Model.Statistics.MinPrice.HasValue) {
                                @Html.Form().Static("Niedrigster Preis", string.Format("{0:C} ({1})", Model.Statistics.MinPrice.Value.Value, Model.Statistics.MinPrice.Value.Key.Name))
                            }
                            @if (Model.Statistics.PriceDevelopment.Any()) {
                                @Html.Form().Static("Durchschnittlicher Preis", Model.Statistics.PriceDevelopment.Last().Value.AvaragePrice.ToString("C"))
                            }
                        </div>
                    </div>


                    <div class="js-chart price-development-chart" id="price_development_chart">
                        <script type="application/json">
                            {                            
                                "type": "line",                            
                                "data": {                            
                                    "labels": ["@Html.Raw(string.Join("\", \"", Model.Statistics.PriceDevelopment.Keys.Select(peanut => peanut.Day.ToShortDateString())))"],                            
                                    "datasets": [                            
                                        {                            
                                            "label": "Einzelpreis in €",                            
                                            "data": [@(string.Join(", ", Model.Statistics.PriceDevelopment.Values.Select(v => v.Price.ToString(CultureInfo.InvariantCulture))))],                            
                                            "borderWidth": 3,
                                            "backgroundColor": [
                                                "rgba(255, 99, 132, 0)"
                                            ],
                                            "borderColor": [
                                                "rgba(0, 0, 0, 0.5)"
                                            ],
                                            "lineTension": 0
                                        },                            
                                        {                            
                                            "label": "Durchschnittspreis in €",                            
                                            "data": [@string.Join(", ", Model.Statistics.PriceDevelopment.Values.Select(v => v.AvaragePrice.ToString(CultureInfo.InvariantCulture)))],                            
                                            "borderWidth": 1,
                                            "backgroundColor": [
                                                "rgba(50, 99, 132, 0.2)"
                                            
                                            ]                            
                                        }                            
                                    ]                            
                                },                            
                                "options": {                            
                                    "scales": {                            
                                        "yAxes": [{                            
                                            "ticks": {                            
                                                "beginAtZero": true                            
                                            }                            
                                        }]                            
                                    }
                                }                            
                            }
                        </script>
                        <canvas></canvas>
                    </div>

                </fieldset>
            } else {
                <p>
                    Es ist noch keine Statistik verfügbar.
                </p>
            }
        </div>
    </div>


</div>