// CIRCLE
// classes 2 extend
.rect-auto {
    clip: rect(auto, auto, auto, auto);
}

.pie {
    position: absolute;
    border: @circle-width solid @primary-color;
    width: 1 - (2 * @circle-width);
    height: 1 - (2 * @circle-width);
    clip: rect(0, .5em, 1em, 0);
    border-radius: 50%;
    transform: rotate(0deg);
}

.pie-fill {
    transform: rotate(180deg);
}

// main
.c100 {
    *,
    *:before,
    *:after {
        box-sizing: content-box;
    }

    position: relative;
    z-index: 1;
    font-size: (@status-dimension-lg - 8px);
    width: 1em;
    height: 1em;
    border-radius: 50%;
    background-color: transparent;

    // bigger size
    &.big {
        font-size: @status-dimension-xl;
    }

    // smaller size
    &.small {
        font-size: @status-dimension-sm - 4px;
    }

    @media (max-width: @screen-xs-max) {
        font-size: @status-dimension-sm - 4px;
    }

    // centered value inside circle
    > span {
        position: absolute;
        width: 100%;
        width: 5em;
        z-index: 1;
        left: 0;
        top: 0;
        line-height: 5em;
        font-size: .2em;
        color: @secondary-color;
        display: block;
        text-align: center;
        white-space: nowrap;
        transition: .2s all ease-out;
    }

    // background inside the circle
    &:after {
        position: absolute;
        top: @circle-width;
        left: @circle-width;
        display: block;
        content: " ";
        border-radius: 50%;
        background-color: @bg-color;
        width: 1 - (2 * @circle-width);
        height: 1 - (2 * @circle-width);
        transition: .2s all ease-in;
    }

    // the slice (mask)
    .slice {
        position: absolute;
        width: 1em;
        height: 1em;
        clip: rect(0, 1em, 1em, .5em);
    }

    // circle to show the status
    .bar {
        &:extend(.pie);
    }

    // loop to create all needed elements automatically
    .generate-elements(@n, @i: 1) when (@i =< @n) {
        &.p@{i} {
            & .slice {
                &:extend(.rect-auto);
            }

            & .bar:after {
                &:extend(.pie-fill);
            }

            & .fill {
                &:extend(.pie);
                &:extend(.pie-fill);
            }
        }
        .generate-elements(@n, (@i + 1));
    }
    // loop to rotate all 100 circles
    .generate-rotation(@n, @i: 1) when (@i =< @n) {
        @degs: (360/100*@i);

        &.p@{i} .bar {
            transform: rotateZ(~"@{degs}deg");
        }

        &.s@{i} .slice {
            transform: rotateZ(~"@{degs}deg");
        }

        .generate-rotation(@n, (@i + 1));
    }

    .generate-elements(100, 51);
    .generate-rotation(100, 1);

    // hover styles
    &:hover {
        cursor: default;

        > span {
            width: 3.33em;
            line-height: 3.33em;
            font-size: .3em;
            color: @primary-color;
        }

        &:after {
            top: @circle-width-hover;
            left: @circle-width-hover;
            width: 1 - (2 * @circle-width-hover);
            height: 1 - (2 * @circle-width-hover);
        }
    }

    // available skin
    &.available {
        z-index: 7;

        .bar,
        .fill {
            border-color: @primary-color-available !important;
        }

        &:hover {
            > span {
                color: @primary-color-available;
            }
        }
    }

    // reserved skin
    &.reserved {
        z-index: 6;

        .bar,
        .fill {
            border-color: @primary-color-reserved !important;
        }

        &:hover {
            > span {
                color: @primary-color-reserved;
            }
        }
    }

    // sold skin
    &.sold {
        z-index: 5;

        .bar,
        .fill {
            border-color: @primary-color-sold !important;
        }

        &:hover {
            > span {
                color: @primary-color-sold;
            }
        }
    }

    // sold skin
    &.unknown {
        z-index: 5;

        .bar,
        .fill {
            border-color: @gray-lighter !important;
        }

        &:hover {
            > span {
                color: @gray-lighter;
            }
        }
    }
}
